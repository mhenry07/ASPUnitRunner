using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace AspUnitRunner.Core.Html {
    // this class is only intended for parsing HTML generated by ASPUnit
    // real-world HTML should be parsed by a more robust library such as HtmlAgilityPack
    internal class HtmlElementParser {
        // note that this does not allow nested elements with the same tag name
        // note that this only matches elements with the pattern: <tag>...</tag>
        private const string HtmlElementRegex =
            @"<(?<tagName>{0}\b)(?<attributes>[^>]*)>(?<innerHtml>(?:.(?!<{0}\b))*)</{0}>";
        private const string HtmlAttributeRegex =
            @"\s+(?<name>[A-Za-z][-\w:.]*)(?:=(?:""(?<value>[^""]*)""|'(?<value>[^']*)'|(?<value>[-\w:.]*)(?=$|[\s/>])))?";

        public static IHtmlCollection GetElementsByTagName(string html, string tagName) {
            var elementMatches = GetElementMatches(html, tagName);
            return CreateCollection(elementMatches);
        }

        private static MatchCollection GetElementMatches(string html, string tagName) {
            var elementRegex = GetElementRegex(tagName);
            return elementRegex.Matches(html);
        }

        private static Regex GetElementRegex(string tagName) {
            var elementPattern = string.Format(HtmlElementRegex, tagName);
            return new Regex(elementPattern, RegexOptions.Singleline | RegexOptions.IgnoreCase);
        }

        private static IHtmlCollection CreateCollection(MatchCollection matches) {
            var elements = new List<IHtmlElement>();
            foreach (Match match in matches)
                elements.Add(CreateElement(match));
            return new HtmlCollection(elements);
        }

        private static IHtmlElement CreateElement(Match match) {
            var element = new HtmlElement {
                TagName = match.Groups["tagName"].Value,
                InnerHtml = match.Groups["innerHtml"].Value
            };
            var attributeMatches = GetAttributeMatches(match);
            SetAttributes(element, attributeMatches);
            return element;
        }

        private static MatchCollection GetAttributeMatches(Match elementMatch) {
            var regex = new Regex(HtmlAttributeRegex);
            return regex.Matches(elementMatch.Groups["attributes"].Value);
        }

        private static void SetAttributes(HtmlElement element, MatchCollection matches) {
            foreach (Match match in matches)
                element.SetAttribute(match.Groups["name"].Value, match.Groups["value"].Value);
        }
    }
}
